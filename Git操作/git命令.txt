1.每个机器都必须自报家门：你的名字和Email地址。
pwd命令用于显示当前目录
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

2.通过git init命令把这个目录变成Git可以管理的仓库：
	git init
  用命令git add告诉Git，把文件添加到仓库：
	git add 文件名.后缀//readme.txt 没有任何显示，这就对了
  用命令git commit告诉Git，把文件提交到仓库
	git commit -m "提交的注释"//"wrote a readme file"

3.运行git status命令看看结果：
	git status //git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改
  看具体修改,用git diff这个命令看:
	git diff 文件名.后缀//readme.txt 
  我们用git log命令查看历史记录
	git log //参数具体的文件
	输出信息太多,--pretty=oneline参数

4.在Git中，用HEAD表示当前版本,上一个版本就是HEAD^,上上一个版本就是HEAD^^,上100个HEAD~100
	git reset --hard HEAD^
	git reset --hard 想要退回的版本id(不必写全,至少6位)//3628164
  命令git reflog用来记录你的每一次命令
	git reflog

5.用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
	git diff HEAD -- 文件名.后缀//readme.txt 

6.git checkout -- file可以丢弃工作区的修改
  readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态
  readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	git checkout -- 文件名.后缀///readme.txt

  用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
	git reset HEAD 文件名.后缀//readme.txt //只是把文件从缓存中移除，并未改变文件中的内容(文件如果有bug还会存在,使用 git checkout -- 文件 真正移除撤销)

7.确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
 rm test.txt在文件管理器中把没用的文件删除
	git rm 文件名.后缀
	git commit -m ""

8.仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联
	git remote add origin git@github.com:youname/file.git //youname是github用户名  file github的仓库名
  把本地库的所有内容推送到远程库上：
	git push -u origin master //用git push命令，实际上是把当前分支master推送到远程。
  从现在起，只要本地作了提交，就可以通过命令：
	git push origin master

9.从远程库克隆 远程库已经准备好了，下一步是用命令git clone克隆一个本地库
	git clone git@github.com:youname/file.git  //youname是github用户名  file github的仓库名

10.我们创建dev分支，然后切换到dev分支:
	git checkout -b dev
  git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
	git branch dev
	git checkout dev
  用git branch命令查看当前分支
	git branch
  dev分支的工作完成，我们就可以切换回master分支：
	git checkout master
  把dev分支的工作成果合并到master分支上：
	git merge dev
  合并完成后，就可以放心地删除dev分支了：
	git branch -d dev
  用带参数的git log也可以看到分支的合并情况：
	git log --graph --pretty=oneline --abbrev-commit

11.Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
  准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
	git merge --no-ff -m "merge with no-ff" dev 
  因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
	git log --graph --pretty=oneline --abbrev-commit

12.首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
	git checkout master
	git checkout -b issue-101
  现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：
  修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
	git checkout master
	git merge --no-ff -m "merged bug fix 101" issue-101
	git branch -d issue-101
  回到dev分支干活
  工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
	git stash list
  工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
  一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	git stash apply stash@{0}
	git stash drop stash@{0}

  另一种方式是用git stash pop，恢复的同时把stash内容也删了：
	git stash pop

13.每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支
	git checkout -b feature-vulcan
	git add vulcan.py
	git commit -m "add feature vulcan"
	git checkout dev
	git branch -d feature-vulcan
  销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan
	git branch -D feature-vulcan

14.要查看远程库的信息，用git remote：
  用git remote -v显示更详细的信息：
	git remote -v
  推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
	git push origin master
  如果要推送其他分支，比如dev，就改成：
	git push origin dev
  因此，多人协作的工作模式通常是这样：
  首先，可以试图用git push origin branch-name推送自己的修改；
  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
  如果合并有冲突，则解决冲突，并在本地提交；
  没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
  这就是多人协作的工作模式，一旦熟悉了，就非常简单。

  小结

  查看远程库信息，使用git remote -v；
  本地新建的分支如果不推送到远程，对其他人就是不可见的；
  从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
  从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

15.在Git中打标签非常简单，首先，切换到需要打标签的分支上
	git branch
	git checkout master
  然后，敲命令git tag <name>就可以打一个新标签：
	git tag v1.0
  可以用命令git tag查看所有标签:
	git tag
  默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
  方法是找到历史提交的commit id，然后打上就可以了
	git log --pretty=oneline --abbrev-commit
  比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：
	git tag v0.9 6224937
  再用命令git tag查看标签
  注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
	git show v0.9
  还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
	git tag -a v0.1 -m "version 0.1 released" 3628164
  如果标签打错了，也可以删除：
	git tag -d v0.1
  如果要推送某个标签到远程，使用命令
	git push origin v1.0
  一次性推送全部尚未推送到远程的本地标签
	git push origin --tags
  如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
	git tag -d v0.9
  然后，从远程删除。删除命令也是push，但是格式如下：
	git push origin :refs/tags/v0.9

16.一定要从自己的账号下clone仓库，这样你才能推送修改。
	git clone git@github.com:youname/file.git
  如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。
  
17.自定义Git 比如，让Git显示颜色，会让命令输出看起来更醒目：
	git config --global color.ui true
  某些文件放到Git工作目录中，但又不能提交它们
  在Git工作区的根目录下创建一个特殊的.gitignore文件 然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
	所有配置文件可以直接在线浏览：https://github.com/github/gitignore
  如果你确实想添加该文件，可以用-f强制添加到Git：
	git add -f App.class
  .gitignore写得有问题,可以用git check-ignore命令检查
	git check-ignore -v App.class

18.配置别名 
	git config --global alias.st status

19.配置文件
  配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
  每个仓库的Git配置文件都放在.git/config文件中：
  别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
  而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

20.搭建Git服务器
  第一步，安装git：
	sudo apt-get install git
  第二步，创建一个git用户，用来运行git服务:
	sudo adduser git
  第三步，创建证书登录：
  收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
  第四步，初始化Git仓库：
  先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
	sudo git init --bare sample.git
	sudo chown -R git:git sample.git
  第五步，禁用shell登录：
  第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
  git:x:1001:1001:,,,:/home/git:/bin/bash  =>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
  第六步，克隆远程仓库：
  git clone git@server:/srv/sample.git